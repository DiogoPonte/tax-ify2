{"version":3,"sources":["components/Copyright.tsx","components/Frontpage.tsx","components/Dropzone.tsx","utils/parsers/translations.ts","utils/parsers/types.ts","utils/parsers/helpers.ts","utils/parsers/loadTransactions.ts","components/tableSettings.tsx","components/ResultTable.tsx","utils/fifo/fifo.ts","components/PreviewTable.tsx","components/card/ResultCard.tsx","components/ResultCards.tsx","components/PreviewData.tsx","index.tsx"],"names":["Copyright","Stack","direction","justifyContent","alignItems","spacing","width","sx","pt","pb","Typography","variant","color","align","Date","getFullYear","FrontPageContent","navigate","useNavigate","theme","createTheme","typography","fontSize","ThemeProvider","GlobalStyles","styles","ul","margin","padding","listStyle","CssBaseline","Container","component","maxWidth","height","gutterBottom","fontWeight","alignSelf","Card","onClick","CardActionArea","CardContent","Dropzone","zoneHeight","handleFiles","paddingTop","acceptedFiles","onAdd","onAlert","message","Icon","UploadFileIcon","dropzoneText","fileObjects","degiroPtToEn","translateDegiro","key","CoinBaseProHeaderValues","CoinBaseHeaderValues","DegiroHeaderValues","NordnetHeaderValues","decodeUTF16LE","binaryStr","cp","i","length","push","charCodeAt","String","fromCharCode","chooseCSVParser","filesCopy","parsers","a","Promise","all","map","file","parser","fileName","name","inputFile","data","toString","split","fileContentBuffer","atob","str","decodeURIComponent","escape","window","fileContent","parsedData","Error","flatMap","x","loadParser","parse","getDataDegiro","input","parseDegiroCSV","orig","column","getDegiroAsColumns","Degiro","rows","getDataNordnet","parseNordnetCSV","getNordnetAsColumns","Nordnet","getDataCoinbase","parseCoinbaseCSV","getCoinbaseAsColumns","Coinbase","getDataCoinbasePro","parseCoinbaseProCSV","getCoinbaseProAsColumns","CoinbasePro","prevField","tmp","cast","value","context","header","columns","trim","results","record","records","transaction","moment","date","time","toISOString","every","_","difference","sortBy","Object","keys","TypeError","nanoid","Source","id","datetime","produto","security","isin","ISIN","valor","valueCurrency","quantidade","quantity","custos","transactionCosts","transactionCostsCurrency","pre√ßo","rate","rateCurrency","total","totalAmount","totalAmountCurrency","operation","delimiter","includes","replace","Number","parseFloat","toDate","Kauppapaiva","Arvopaperi","Summa","Valuutta","Maara","Kokonaiskulut","Tapahtumatyyppi","startAt","findIndex","o","startsWith","toUpperCase","from_line","Subtotal","QuantityTransacted","SpotPriceatTransaction","SpotPriceCurrency","Timestamp","Asset","Fees","Total","TransactionType","product","pricefeetotalunit","undefined","createdat","size","price","fee","side","currencyFormatter","Intl","NumberFormat","style","currency","validateOperation","validateCurrency","currencyInput","currencyFormat","type","valueFormatter","arr","format","e","cellClassName","currencyFormatResults","timeFormat","toLocaleString","year","month","day","hour","minute","second","columnsSecurity","field","headerName","editable","minWidth","preProcessEditCellProps","params","isValid","props","error","columnsCrypto","columnsTransaction","mode","CustomToolbar","GridToolbarContainer","paddingLeft","className","gridClasses","toolbarContainer","GridToolbarExport","printOptions","bodyClassName","hideToolbar","hideFooter","allColumns","ResultTable","DataGrid","minHeight","components","Toolbar","calculateFIFOTransactions","operationHistory","correctedTransferFees","sortedOperationHistory","filter","reduce","capitalGainPerSellDate","sale","calculateCapitalGainsForSale","calculateFIFOCapitalGains","gainByDate","totalSoldAmount","sumBy","transactions","amountsold","dividedFees","transferFee","transferFeeForSell","transferFeeSummedFromSELLOperation","console","warn","ticker","amoutntBought","y","buydate","acquisitionFee","orderBy","symbol","forEach","buy","amountSold","Math","min","amount","trs","selldate","transferPrice","profitOrLoss","acquisitionPrice","transactionFee","totalPrice","round","timeZone","PreviewTable","rawDataAsColumns","rawDatatSetCallback","useState","cellCommit","setCellCommit","useEffect","row","matchingRow","find","newObj","item","fontVariantNumeric","bgcolor","palette","onCellEditCommit","newSelection","ResultCard","content","footer","footerSecondary","contentColor","infoHover","infoDirection","background","paper","text","primary","secondary","action","active","Tooltip","title","placement","Box","boxShadow","borderRadius","p","formatCurrency","display","mx","ResultCards","capitalGains","toFixed","capitalLosses","acquisitionFees","sellprices","parsersCrypto","parsersSecurity","Alert","forwardRef","ref","elevation","PreviewData","setZoneHeight","files","setFiles","showTable","setShowTable","setShowThankYou","rowDataColumn","setRowDataColumn","setRawDataAsColumns","originalData","setOriginalData","setResults","parseError","setParseError","setErrorFifo","showCurrencyFetchButton","setShowCurrencyFetchButton","calculatedResults","setCalculatedResults","successFul","uniqBy","errors","err","msg","newRows","result","concat","newRawData","assign","enableCurrencyWarning","invalid","sleep","ms","resolve","setTimeout","severity","pl","mt","Button","startIcon","disabled","fifoData","coinBaseIssueRows","customOp","coinbaseTMP","issueRow","matchinOrigData","info","Notes","boughAmount","boughtCurrency","correctedCoinbaseData","abs","parseColumnDataToFIFO","finalFifo","idx","minusFees","endIcon","ReactDOM","render","basename","process","path","element","document","getElementById"],"mappings":"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","file":"static/js/main.490f120b.chunk.js","sourcesContent":["import Link from '@mui/material/Link';\r\nimport Typography from '@mui/material/Typography';\r\nimport { Stack } from '@mui/material';\r\n\r\nconst Copyright = () => {\r\n    return (\r\n        <Stack\r\n            direction=\"column\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={1}\r\n            width={\"sm\"}\r\n            sx={{ pt: 1, pb: 4 }}\r\n        >\r\n            <Typography variant=\"body2\" sx={{ pt: 0 }} color=\"text.secondary\" align=\"center\" >\r\n                O utilizador √© respons√°vel pelos valores declarados no IRS\r\n            </Typography>\r\n            <Typography variant=\"body2\" sx={{ pt: 0 }} color=\"text.secondary\" align=\"center\" >\r\n                Os ficheiros submetidos na plataforma s√£o processados localmente no browser. \r\n            </Typography>\r\n            <Typography variant=\"body2\" sx={{ pt: 0 }} color=\"text.secondary\" align=\"center\" >\r\n                {'Copyright ¬© '}\r\n                Diogo Ponte\r\n                {' '}\r\n                {new Date().getFullYear()}\r\n                {'. '}\r\n            </Typography>\r\n        </Stack>\r\n    );\r\n}\r\n\r\nexport { Copyright }\r\n","import { Fragment } from 'react'\r\n\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Grid from '@mui/material/Grid';\r\nimport Link from '@mui/material/Link';\r\nimport GlobalStyles from '@mui/material/GlobalStyles';\r\nimport Container from '@mui/material/Container';\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport { Copyright } from './Copyright'\r\nimport Typography from '@mui/material/Typography';\r\nimport { CardActionArea, createTheme, Paper, Stack, styled, ThemeProvider } from '@mui/material';\r\n\r\nconst FrontPageContent = () => {\r\n    const navigate = useNavigate();\r\n    const theme = createTheme({\r\n        typography: {\r\n            fontSize: 14,\r\n        },\r\n    });\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <GlobalStyles styles={{ ul: { margin: 0, padding: 0, listStyle: 'none' } }} />\r\n            <CssBaseline />\r\n            <Container component=\"main\" maxWidth=\"sm\" sx={{ height: '100vh', pt: 8, pb: 4 }}>\r\n                <Stack\r\n                    direction=\"column\"\r\n                    justifyContent=\"space-between\"\r\n                    alignItems=\"space-between\"\r\n                    sx={{ height: '100%', pt: 0, pb: 2 }}\r\n                >\r\n                    <Stack\r\n                        direction=\"column\"\r\n                        justifyContent=\"center\"\r\n                        alignItems=\"center\"\r\n                        spacing={6}\r\n                        width=\"sm\"\r\n                    >\r\n                        <Typography\r\n                            component=\"h1\"\r\n                            variant=\"h3\"\r\n                            align=\"center\"\r\n                            color=\"text.primary\"\r\n                            gutterBottom\r\n                            sx={{ fontWeight: 'bold', pt: 8 }}\r\n                        >\r\n                            Tax-ify\r\n                        </Typography>\r\n                        <Typography alignSelf=\"center\" align=\"center\" variant=\"h6\" sx={{ pt: 3 }} component=\"p\">\r\n                            Calcula os lucros ou prejuizos utilizando a metodologia FIFO para efeitos de declara√ß√£o do Anexo J do IRS\r\n                        </Typography>\r\n                        <Typography alignSelf=\"center\" variant=\"h6\" component=\"p\" sx={{ pt: 2 }}>\r\n                        Selecione o tipo de ativo:\r\n                        </Typography>\r\n\r\n                        <Container component=\"main\" sx={{ width: '100%', pt: 4, pb: 4 }}>\r\n\r\n                            <Stack\r\n                                direction=\"column\"\r\n                                spacing={6}\r\n                                justifyContent=\"center\"\r\n                                alignItems=\"center\"\r\n           \r\n                            >\r\n                               {/*<Card sx={{ maxWidth: 430,  width: \"100%!important\" }} onClick={() => {\r\n                                    navigate(\"/crypto\");\r\n                                }}>\r\n                                    {<CardActionArea>\r\n                                        <CardContent>\r\n                                            <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                                                Crypto\r\n                                            </Typography>\r\n                                            <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                                Por exemplo: Ethereumm, BTC.\r\n                                            </Typography>\r\n                                            <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                                Plataformas suportadas: <b>Coinbase, Coinbase Pro</b>\r\n                                            </Typography>\r\n                                        </CardContent>\r\n                                    </CardActionArea>\r\n                            </Card>*/}\r\n\r\n                                <Card sx={{ maxWidth: 430,width: \"100%!important\"}} onClick={() => {\r\n                                    navigate(\"/securities\");\r\n                                }}>\r\n                                    <CardActionArea>\r\n                                        <CardContent>\r\n                                            <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                                                Tit√∫los\r\n                                            </Typography>\r\n                                            <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                                A√ß√µes, ETF's, fundos e outros t√≠tulos.\r\n                                            </Typography>\r\n                                            <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                                Plataformas suportadas: <b>Degiro</b>\r\n                                            </Typography>\r\n                                        </CardContent>\r\n                                    </CardActionArea>\r\n                                </Card>\r\n                            </Stack>\r\n                        </Container>\r\n                    </Stack>\r\n                    <Copyright />\r\n                </Stack>\r\n\r\n\r\n            </Container>\r\n\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport { FrontPageContent as Frontpage }\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport Container from '@mui/material/Container';\r\nimport { DropzoneAreaBase, FileObject } from 'react-mui-dropzone';\r\nimport UploadFileIcon from '@mui/icons-material/UploadFile';\r\nimport { createTheme, ThemeProvider } from '@mui/material';\r\n\r\n\r\ninterface Props {\r\n    zoneHeight: number,\r\n    handleFiles: (arg0: FileObject[]) => void;\r\n}\r\n\r\nconst Dropzone = ({ zoneHeight, handleFiles }: Props) => {\r\n    \r\n\r\n    const handleAlert = (message: any, variant: any) => {\r\n        //console.log(`${variant}: ${message}`)\r\n    }\r\n    /***\r\n     * \r\n     * TODO REFACTOR ZONEHEIGHT INTO ENUM/BETTER LOGIC\r\n     */\r\n\r\n    return (\r\n        <Container sx={{\r\n            pt: 4, pb: 3,\r\n            width: \"100%\",\r\n            '& .MuiDropzoneArea-textContainer': {\r\n                color: 'black'\r\n            },\r\n            '& .MuiDropzoneArea-text': {\r\n                paddingTop: zoneHeight > 200 ? 8 : 4,\r\n                fontSize: 20,\r\n            },\r\n            '& .MuiDropzoneArea-root': {\r\n                height: zoneHeight,\r\n            },\r\n        }}>\r\n            <DropzoneAreaBase\r\n                acceptedFiles={['text/x-csv', 'text/plain', 'application/vnd.ms-excel', 'application/x-csv', 'application/csv', 'text/csv', 'text/comma-separated-values', 'text/x-comma-separated-values', 'text/tab-separated-values']}\r\n                onAdd={handleFiles}\r\n                onAlert={handleAlert}\r\n                Icon={UploadFileIcon as any}\r\n                dropzoneText={zoneHeight > 200 ? \"Largue um ficheiro CSV aqui\" : \"Largue mais ficheiros CSV aqui\"}\r\n                fileObjects={[]}\r\n            />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport { Dropzone }","const degiroPtToEn = {\r\n    \"Data\": \"date\",\r\n    \"Hora\": \"time\",\r\n    \"Produto\": \"security\",\r\n    \"ISIN\": \"ISIN\",\r\n    \"Bolsa de\": \"reference\",\r\n    \"Bolsa\": \"venue\",\r\n    \"Quantidade\": \"quantity\",\r\n    \"Pre√ßos\": \"rate\",\r\n    \"Pre√ßos-Moeda\": \"rateCurrency\",\r\n    \"Valor local\": \"marketValue\",\r\n    \"Valor local-Moeda\": \"marketValueCurrency\",\r\n    \"Valor\": \"value\",\r\n    \"Valor-Moeda\": \"valueCurrency\",\r\n    \"Taxa de C√¢mbio\": \"exchangeRate\",\r\n    \"Custos de transa√ß√£o\": \"transactionCosts\",\r\n    \"Transaction and/or third\": \"transactionCosts\",\r\n    \"Transaction and/or third-valuutta\": \"transactionCostsCurrency\",\r\n    \"Custos de transa√ß√£o-Moeda\": \"transactionCostsCurrency\",\r\n    \"Total\": \"totalAmount\",\r\n    \"Total-Moeda\": \"totalAmountCurrency\",\r\n    \"ID da Ordem\": \"orderId\"\r\n}\r\n\r\nconst translateDegiro = (key: keyof typeof degiroPtToEn) => {\r\n    if (degiroPtToEn[key]) {\r\n        return degiroPtToEn[key]\r\n    }\r\n}\r\n\r\nexport default translateDegiro;","export interface DegiroHeaders {\r\n  readonly id: string;\r\n  time: string;\r\n  security: string;\r\n  ISIN: string;\r\n  reference: string;\r\n  venue: string;\r\n  quantity: number;\r\n  rate: number;\r\n  rateCurrency: string;\r\n  marketValue: number;\r\n  marketValueCurrency: string;\r\n  value: number;\r\n  valueCurrency: string;\r\n  exchangeRate: number;\r\n  transactionCosts: number;\r\n  transactionCostsCurrency: string;\r\n  totalAmount: number;\r\n  totalAmountCurrency: string;\r\n  orderId: string;\r\n  datetime: Date;\r\n  Source: \"Degiro\";\r\n  Error?: string;\r\n}\r\n\r\nexport interface CoinbaseHeaders {\r\n  readonly id: string;\r\n  Timestamp: Date;\r\n  TransactionType: \"BUY\" | \"SELL\" | \"RECEIVE\" | \"CONVERT\" | \"COINBASE EARN\";\r\n  Asset: string;\r\n  QuantityTransacted: number;\r\n  SpotPriceCurrency: string;\r\n  SpotPriceatTransaction: number;\r\n  Subtotal: number;\r\n  Total: number;\r\n  Fees: number;\r\n  Notes: string;\r\n  Source: \"Coinbase\";\r\n  Error?: string;\r\n}\r\n\r\nexport interface NordnetHeaders {\r\n  readonly id: string;\r\n  Id: string;\r\n  Kirjauspaiva: Date;\r\n  Kauppapaiva: Date;\r\n  Maksupaiva: string;\r\n  Salkku: string;\r\n  Tapahtumatyyppi: string;\r\n  Arvopaperi: string;\r\n  Instrumenttityyppi: string;\r\n  ISIN: string;\r\n  Maara: number;\r\n  Pre√ßo: number;\r\n  Korko: string;\r\n  Kokonaiskulut: number;\r\n  KokonaiskulutValuutta: string;\r\n  Summa: number;\r\n  Valuutta: string;\r\n  Hankintaarvo: string;\r\n  Tulos: string;\r\n  Kokonaismaara: number;\r\n  Saldo: string;\r\n  Vaihtokurssi: string;\r\n  Tapahtumateksti: string;\r\n  Mitatointipaiva: string;\r\n  Laskelma: string;\r\n  Vahvistusnumero: string;\r\n  Valityspalkkio: number;\r\n  ValityspalkkioValuutta: string;\r\n  Source: \"Nordnet\";\r\n  Error?: string;\r\n}\r\n\r\nexport interface CoinbaseProHeaders {\r\n  readonly id: string;\r\n  portfolio: string;\r\n  tradeid: string;\r\n  product: string;\r\n  side: string;\r\n  createdat: Date;\r\n  size: number;\r\n  sizeunit: string;\r\n  price: number;\r\n  fee: number;\r\n  total: number;\r\n  pricefeetotalunit: string;\r\n  Source: \"CoinbasePro\"\r\n  Error?: string;\r\n}\r\n\r\nexport const CoinBaseProHeaderValues = [\r\n  \"portfolio\",\r\n  \"tradeid\",\r\n  \"product\",\r\n  \"side\",\r\n  \"createdat\",\r\n  \"size\",\r\n  \"sizeunit\",\r\n  \"price\",\r\n  \"fee\",\r\n  \"total\",\r\n  \"pricefeetotalunit\"\r\n]\r\n\r\nexport const CoinBaseHeaderValues = [\r\n  'Timestamp',\r\n  'TransactionType',\r\n  'Asset',\r\n  'QuantityTransacted',\r\n  'SpotPriceCurrency',\r\n  'SpotPriceatTransaction',\r\n  'Subtotal',\r\n  'Total',\r\n  'Fees',\r\n  'Notes',\r\n]\r\n\r\nexport const DegiroHeaderValues = [\r\n  'date',\r\n  'time',\r\n  'security',\r\n  'ISIN',\r\n  'reference',\r\n  'venue',\r\n  'quantity',\r\n  'rate',\r\n  'rateCurrency',\r\n  'marketValue',\r\n  'marketValueCurrency',\r\n  'value',\r\n  'valueCurrency',\r\n  'exchangeRate',\r\n  'transactionCosts',\r\n  'transactionCostsCurrency',\r\n  'totalAmount',\r\n  'totalAmountCurrency',\r\n  'orderId',\r\n  'datetime'\r\n]\r\n\r\nexport const NordnetHeaderValues = [\r\n  'Id', 'Kirjauspaiva',\r\n  'Kauppapaiva', 'Maksupaiva',\r\n  'Salkku', 'Tapahtumatyyppi',\r\n  'Arvopaperi', 'Instrumenttityyppi',\r\n  'ISIN', 'Maara',\r\n  'Pre√ßo', 'Korko',\r\n  'Kokonaiskulut', 'KokonaiskulutValuutta',\r\n  'Summa', 'Valuutta',\r\n  'Hankintaarvo', 'Tulos',\r\n  'Kokonaismaara', 'Saldo',\r\n  'Vaihtokurssi', 'Tapahtumateksti',\r\n  'Mitatointipaiva', 'Laskelma',\r\n  'Vahvistusnumero', 'Valityspalkkio',\r\n  'ValityspalkkioValuutta'\r\n]\r\n","import _ from \"lodash\";\r\nimport { nanoid } from \"nanoid\";\r\nimport { FileObject } from \"react-mui-dropzone\";\r\nimport { rawDatas, resultFromParse } from \"../../components/PreviewData\";\r\nimport { ColumnDataCrypto, ColumnDataSecurity } from \"../../components/tableSettings\";\r\nimport { Operation } from \"../fifo\";\r\nimport { getCoinbaseAsColumns } from \"./loadTransactions\";\r\nimport { CoinbaseHeaders } from \"./types\";\r\n\r\n/**\r\n * Workaround for browsers.\r\n * https://developer.mozilla.org/en-US/docs/Glossary/Base64#solution_1_%E2%80%93_escaping_the_string_before_encoding_it\r\n */\r\nconst b64_to_utf8 = (str: string) => (decodeURIComponent(escape(window.atob(str))))\r\n\r\nconst decodeUTF16LE = (binaryStr: string) => {\r\n    const cp = [];\r\n    for (let i = 0; i < binaryStr.length; i += 2)\r\n        cp.push(binaryStr.charCodeAt(i) | (binaryStr.charCodeAt(i + 1) << 8));\r\n    return String.fromCharCode(...cp);\r\n}\r\n\r\n/**\r\n * Gets the current file and checks it againts parsers.\r\n * @param filesCopy \r\n * @returns headers\r\n */\r\nconst chooseCSVParser = async (filesCopy: FileObject[], parsers: any[]): Promise<resultFromParse[]> => {\r\n    const a = await Promise.all(filesCopy.map(async file => {\r\n        return await Promise.all(parsers.map(async parser => {\r\n            const fileName = file.file.name\r\n            try {\r\n                const inputFile = file.data ? file.data.toString().split(',')[1] : \"\"\r\n                const fileContentBuffer = parser.name === 'getDataNordnet' ? decodeUTF16LE(atob(inputFile)) : b64_to_utf8(inputFile)\r\n                const fileContent = fileContentBuffer.toString()\r\n                const parsedData = await parser(fileContent)\r\n                parsedData.fileName = fileName\r\n                return parsedData\r\n            } catch (e: any) {\r\n                return { Error: e, fileName: fileName }\r\n            }\r\n        }))\r\n    })) as resultFromParse[]\r\n    return a.flatMap(x => x)\r\n}\r\n\r\n/**\r\n * Due to Jest (26.x.x) being the latest stable release, we have to default to commonjs module for tests.\r\n * The ESM module support through Babel was not sufficient and resulted in different behaviour. \r\n * @returns parse function\r\n */\r\nconst loadParser: any = async () => (process.env.NODE_ENV === 'test' ?\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore  \r\n    (await import('csv/dist/cjs/sync.cjs')).parse :\r\n    (await import('csv/dist/esm/sync')).parse\r\n)\r\n\r\n\r\nconst parseColumnDataToFIFO = (rawDataAsColumns: ColumnDataSecurity[] | ColumnDataCrypto[], originalData: rawDatas): Operation[] => {\r\n    const coinBaseIssueRows = rawDataAsColumns.filter(customOp => (customOp.operation === 'CONVERT' ||\r\n        customOp.operation === 'COINBASE EARN' ||\r\n        customOp.operation === 'RECEIVE') &&\r\n        originalData['Coinbase'].map(x => x.id).includes(customOp.id)) as ColumnDataCrypto[]\r\n\r\n    const coinbaseTMP: CoinbaseHeaders[] = []\r\n    coinBaseIssueRows.forEach(issueRow => {\r\n        const matchinOrigData = originalData['Coinbase']?.find(x => x.id === issueRow.id)\r\n        if (matchinOrigData?.TransactionType === 'CONVERT') {\r\n            const info = matchinOrigData.Notes.split(' ')\r\n            //const soldAmount = info[1]\r\n            //const soldCurrency = info[2]\r\n            const boughAmount = Number(info[4])\r\n            const boughtCurrency = info[5]\r\n            coinbaseTMP.push({\r\n                ...matchinOrigData,\r\n                TransactionType: \"SELL\",\r\n                id: nanoid(10),\r\n                Fees: 0,\r\n                Total: matchinOrigData.Total - matchinOrigData.Fees\r\n            })\r\n            coinbaseTMP.push({\r\n                ...matchinOrigData,\r\n                TransactionType: \"BUY\",\r\n                id: nanoid(10),\r\n                Asset: boughtCurrency,\r\n                QuantityTransacted: boughAmount,\r\n                SpotPriceatTransaction: matchinOrigData.Subtotal / boughAmount\r\n            })\r\n        } else if (matchinOrigData?.TransactionType === 'COINBASE EARN') {\r\n            coinbaseTMP.push({\r\n                ...matchinOrigData,\r\n                TransactionType: \"BUY\",\r\n            })\r\n        } else if (matchinOrigData?.TransactionType === 'RECEIVE') {\r\n            coinbaseTMP.push({\r\n                ...matchinOrigData,\r\n                TransactionType: \"BUY\",\r\n            })\r\n        }\r\n    })\r\n\r\n    const correctedCoinbaseData = getCoinbaseAsColumns(coinbaseTMP)\r\n    // We do not need filter by unique since other operations than BUY and SELL are filtered below.\r\n    const combined = rawDataAsColumns.concat(correctedCoinbaseData ? correctedCoinbaseData as any : [])\r\n/*     const combinedNordnet = combined.map(x => ({\r\n        ...x,\r\n        operation: x.operation === 'OSTO' ? 'BUY': 'SELL'\r\n    })) */\r\n    const fifoData = combined\r\n        .filter(type => type.operation === 'BUY' || type.operation === 'SELL')\r\n        .map(transaction => {\r\n            return {\r\n                symbol: transaction.produto,\r\n                date: transaction.data,\r\n                price: Math.abs(Number(transaction.pre√ßo.split(' ')[0])),\r\n                amount: Math.abs((transaction.quantidade)),\r\n                type: transaction.operation as \"BUY\" | \"SELL\",\r\n                transactionFee: Math.abs(Number(transaction.custos.split(' ')[0])),\r\n            }\r\n        })\r\n    return fifoData as Operation[]\r\n}\r\n\r\n\r\n\r\nexport { chooseCSVParser, loadParser, parseColumnDataToFIFO }","import translateDegiro from './translations'\r\nimport moment from 'moment';\r\nimport 'moment-timezone';\r\nimport { Operation } from '../fifo/types'\r\nimport { DegiroHeaders, CoinbaseHeaders, CoinbaseProHeaders, CoinBaseProHeaderValues, CoinBaseHeaderValues, DegiroHeaderValues, NordnetHeaderValues, NordnetHeaders } from './types'\r\nimport { ColumnDataCrypto, ColumnDataSecurity } from '../../components/tableSettings'\r\nimport _ from 'lodash';\r\nimport { nanoid } from 'nanoid/async'\r\nimport { loadParser } from './helpers';\r\n\r\n\r\nconst getDataDegiro = async (input: string) => {\r\n    const orig = await parseDegiroCSV(input)\r\n    const column = getDegiroAsColumns(orig)\r\n    return {\r\n        orig: {Degiro : orig},\r\n        rows: column\r\n    }\r\n}\r\n\r\nconst getDataNordnet = async (input: string) => {\r\n    const orig = await parseNordnetCSV(input)\r\n    const column = getNordnetAsColumns(orig)\r\n    return {\r\n        orig: {Nordnet : orig},\r\n        rows: column\r\n    }\r\n}\r\nconst getDataCoinbase = async (input: string) => {\r\n    const orig = await parseCoinbaseCSV(input)\r\n    const column = getCoinbaseAsColumns(orig)\r\n    return {\r\n        orig: {Coinbase : orig},\r\n        rows: column\r\n    }\r\n}\r\n\r\nconst getDataCoinbasePro = async (input: string) => {\r\n    const orig = await parseCoinbaseProCSV(input)\r\n    const column = getCoinbaseProAsColumns(orig)\r\n    return {\r\n        orig: {CoinbasePro : orig},\r\n        rows: column\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * \r\n * ************DEGIRO FUNCTIONS********************\r\n *\r\n */\r\n\r\nconst parseDegiroCSV = async (input: string): Promise<DegiroHeaders[]> => {\r\n    let prevField = \"\"\r\n    const parse = await loadParser()\r\n    const tmp = parse(input, {\r\n        cast: (value: any, context: any) => {\r\n            if (context.header) {\r\n                if (value === '') return translateDegiro(`${prevField}-Moeda` as any);\r\n                prevField = value\r\n                return translateDegiro(value)\r\n            }\r\n            return String(value)\r\n        },\r\n        columns: true,\r\n        trim: true,\r\n    });\r\n\r\n    const results = []\r\n    for await (const record of tmp) results.push(record)\r\n    const records: DegiroHeaders[] = results.map((transaction: any) => {\r\n        transaction['datetime'] = moment(`${transaction.date}-${transaction.time}`, \"DD-MM-YYYY-HH-mm\").toISOString()\r\n        return transaction\r\n    })\r\n\r\n    if (results.every(x => _.difference(_.sortBy(DegiroHeaderValues), _.sortBy(Object.keys(x))).length !== 0)) {\r\n        throw TypeError('All headers not found in the provided Degiro file.')\r\n    }\r\n\r\n    return (await Promise.all(records.map(async x => ({\r\n        ...x, Source: \"Degiro\", id: (await nanoid(10))\r\n    })))) as DegiroHeaders[]\r\n\r\n}\r\n\r\nconst getDegiroAsColumns = (records: DegiroHeaders[]): ColumnDataSecurity[] => {\r\n    const ret = records.map(record => {\r\n        return {\r\n            id: record.id,\r\n            data: new Date(record.datetime),\r\n            produto: record.security,\r\n            isin: record.ISIN,\r\n            valor: `${record.value} ${record.valueCurrency}`,\r\n            quantidade: record.quantity,\r\n            custos: `${record.transactionCosts} ${record.transactionCostsCurrency}`,\r\n            pre√ßo: `${record.rate} ${record.rateCurrency}`,\r\n            total: `${record.totalAmount} ${record.totalAmountCurrency}`,\r\n            operation: record.quantity > 0 ? \"BUY\" : \"SELL\",\r\n        } as ColumnDataSecurity\r\n    })\r\n    return ret\r\n}\r\n\r\nconst prepareDegiroForFIFO = (rawData: DegiroHeaders[]): Operation[] => {\r\n    return rawData\r\n        .map(record => {\r\n            return {\r\n                symbol: record.security,\r\n                date: record.datetime,\r\n                price: record.rate,\r\n                amount: record.quantity,\r\n                type: record.quantity > 0 ? \"BUY\" : \"SELL\",\r\n                transactionFee: Math.abs(record.transactionCosts),\r\n            }\r\n        })\r\n}\r\n\r\n\r\n/**\r\n * \r\n * ************NORDNET FUNCTIONS********************\r\n *\r\n */\r\n\r\nconst parseNordnetCSV = async (input: string): Promise<NordnetHeaders[]> => {\r\n    const parse = await loadParser()\r\n    const tmp = parse(input, {\r\n        delimiter: [\"\\t\"],\r\n        columns: true,\r\n        trim: true,\r\n        cast: (value: any, context: any) => {\r\n            if (context.header) {\r\n                let header = value\r\n                if (header.includes('√§')) header = header.replace(/√§/g, 'a')\r\n                if (header.includes('√∂')) header = header.replace(/√∂/g, 'o')\r\n                if (header.includes('-')) header = header.replace(/-/g, '')\r\n                return header.replace(/\\s/g, '')\r\n            }\r\n            const column = context.column\r\n            //these are probably unneeded\r\n            if (column === 'Maara' ||\r\n                column === 'Pre√ßo' ||\r\n                column === 'Valityspalkkio' ||\r\n                column === 'Summa' ||\r\n                column === 'Kokonaiskulut' ||\r\n                column === 'Kokonaismaara') return Number.parseFloat(value.replace(/,/g, '.'));\r\n            if (column === 'Kirjauspaiva' ||\r\n                column === 'Kauppapaiva' ||\r\n                column === 'Maksupaiva') return moment(value, \"YYYY-MM-DD\").toDate()\r\n            return String(value)\r\n        },\r\n    })\r\n\r\n    const results = []\r\n    for await (const record of tmp) {\r\n        results.push(record)\r\n    }\r\n\r\n    if (results.every(x => _.difference(NordnetHeaderValues, _.sortBy(Object.keys(x))).length !== 0)) {\r\n        throw TypeError('All headers not found in the provided Nordnet file.')\r\n    }\r\n\r\n    return (await Promise.all(results.map(async x => ({\r\n        ...x, Source: \"Nordnet\", id: (await nanoid(10))\r\n    })))) as NordnetHeaders[]\r\n}\r\n\r\nconst getNordnetAsColumns = (records: NordnetHeaders[]): ColumnDataSecurity[] => {\r\n    const ret = records.map(record => {\r\n        return {\r\n            id: record.id,\r\n            data: new Date(record.Kauppapaiva),\r\n            produto: record.Arvopaperi,\r\n            isin: record.ISIN,\r\n            valor: `${record.Summa} ${record.Valuutta}`,\r\n            quantidade: record.Maara,\r\n            custos: record.Kokonaiskulut.toString(),\r\n            pre√ßo: `${record.Summa / record.Maara} ${record.Valuutta}`,\r\n            total: `${record.Summa - record.Kokonaiskulut} ${record.Valuutta}`,\r\n            operation: record.Tapahtumatyyppi,\r\n        } as ColumnDataSecurity\r\n    })\r\n    return ret\r\n}\r\n\r\n\r\nconst prepareNordnetForFIFO = (rawData: NordnetHeaders[]): Operation[] => {\r\n    return rawData\r\n        .filter(x => x.Tapahtumatyyppi === 'MYYNTI' || x.Tapahtumatyyppi === 'OSTO')\r\n        .map(record => {\r\n            return {\r\n                symbol: record.Arvopaperi,\r\n                date: record.Kauppapaiva,\r\n                price: record.Pre√ßo,\r\n                amount: record.Maara,\r\n                type: record.Tapahtumatyyppi === 'OSTO' ? \"BUY\" : \"SELL\",\r\n                transactionFee: record.Kokonaiskulut,\r\n            }\r\n        })\r\n}\r\n\r\n\r\n\r\n/**\r\n * \r\n * ************COINBASE FUNCTIONS********************\r\n *\r\n */\r\n\r\nconst parseCoinbaseCSV = async (input: string): Promise<CoinbaseHeaders[]> => {\r\n    const startAt = _.findIndex(input?.split('\\n'), (o) => o?.startsWith('Timestamp,Transaction'))\r\n    const parse = await loadParser()\r\n    const results = parse(input, {\r\n        cast: (value: any, context: any) => {\r\n            if (context.header) {\r\n                if (value.includes('(')) return value.split('(')[0].replace(/\\s/g, '')\r\n                return value.replace(/\\s/g, '')\r\n            }\r\n            if (context.column === 'Timestamp') return moment(value, \"YYYY-MM-DD-HH-mm-ss\").toISOString()\r\n            if (context.column === 'TransactionType') return value.toUpperCase()\r\n            return String(value)\r\n        },\r\n        columns: true,\r\n        from_line: startAt > 0 ? startAt + 1 : 1,\r\n        trim: true,\r\n    })\r\n    if (results.every((x: any) => _.difference(CoinBaseHeaderValues, _.sortBy(Object.keys(x))).length !== 0)) {\r\n        throw TypeError('All headers not found in the provided Coinbase file.')\r\n    }\r\n\r\n    return (await Promise.all(results.map(async (x: any) => ({\r\n        ...x, Source: \"Coinbase\", id: (await nanoid(10))\r\n    })))) as CoinbaseHeaders[]\r\n}\r\n\r\nconst prepareCoinbaseForFIFO = (rawData: CoinbaseHeaders[]): Operation[] => {\r\n    const prepareRawFifo: CoinbaseHeaders[] = []\r\n    rawData.forEach(statement => {\r\n        if (statement.TransactionType === 'CONVERT') {\r\n            const info = statement.Notes.split(' ')\r\n            //const soldAmount = info[1]\r\n            //const soldCurrency = info[2]\r\n            const boughAmount = Number(info[4])\r\n            const boughtCurrency = info[5]\r\n            prepareRawFifo.push({\r\n                ...statement,\r\n                TransactionType: \"SELL\",\r\n                Fees: 0,\r\n                Total: statement.Total - statement.Fees\r\n            })\r\n            prepareRawFifo.push({\r\n                ...statement,\r\n                TransactionType: \"BUY\",\r\n                Asset: boughtCurrency,\r\n                QuantityTransacted: boughAmount,\r\n                SpotPriceatTransaction: statement.Subtotal / boughAmount\r\n            })\r\n        } else if (statement.TransactionType === 'COINBASE EARN') {\r\n            prepareRawFifo.push({\r\n                ...statement,\r\n                TransactionType: \"BUY\",\r\n            })\r\n        } else if (statement.TransactionType === 'RECEIVE') {\r\n            prepareRawFifo.push({\r\n                ...statement,\r\n                TransactionType: \"BUY\",\r\n            })\r\n        }\r\n    })\r\n\r\n    const dataFifo: Operation[] = rawData.concat(prepareRawFifo)\r\n        .filter(x => x.TransactionType === 'BUY' || x.TransactionType === 'SELL')\r\n        .map(record => {\r\n            return {\r\n                symbol: record.Asset,\r\n                date: new Date(record.Timestamp),\r\n                price: Number(record.SpotPriceatTransaction),\r\n                amount: Number(record.QuantityTransacted),\r\n                type: record.TransactionType as \"BUY\" | \"SELL\",\r\n                transactionFee: Number(record.Fees ?? 0),\r\n            }\r\n        })\r\n    return dataFifo\r\n\r\n}\r\n\r\n\r\nconst getCoinbaseAsColumns = (records: CoinbaseHeaders[]): ColumnDataCrypto[] => {\r\n    const ret = records.map(record => {\r\n        const value = `${record.Subtotal ?\r\n            Number(record.Subtotal) : (record.QuantityTransacted * record.SpotPriceatTransaction)} ${record.SpotPriceCurrency}`\r\n        return {\r\n            id: record.id,\r\n            data: record.Timestamp,\r\n            produto: record.Asset,\r\n            valor: value,\r\n            quantidade: Number(record.QuantityTransacted),\r\n            custos: `${Number(record.Fees) ? Number(record.Fees) : 0} ${record.SpotPriceCurrency}`,\r\n            pre√ßo: `${record.SpotPriceatTransaction} ${record.SpotPriceCurrency}`,\r\n            total: `${Number(record.Total ? record.Total : 0)} ${record.SpotPriceCurrency}`,\r\n            operation: record.TransactionType,\r\n        } as ColumnDataCrypto\r\n    })\r\n    return ret\r\n}\r\n\r\n/**\r\n * \r\n * ************COINBASE PRO FUNCTIONS********************\r\n *\r\n */\r\n\r\nconst parseCoinbaseProCSV = async (input: string): Promise<CoinbaseProHeaders[]> => {\r\n    const parse = await loadParser()\r\n    const tmp = parse(input, {\r\n        cast: (value: any, context: any) => {\r\n            if (context.header) {\r\n                if (value.includes('/')) return value.replace(/\\//g, '').replace(/\\s/g, '')\r\n                return value.replace(/\\s/g, '')\r\n            }\r\n            if (context.column === 'createdat') return new Date(value).toISOString()\r\n            return String(value)\r\n        },\r\n        columns: true,\r\n        trim: true,\r\n    })\r\n\r\n    const results = []\r\n    for await (const record of tmp) results.push(record)\r\n\r\n\r\n    if (results.every(x => _.difference(_.sortBy(CoinBaseProHeaderValues), _.sortBy(Object.keys(x))).length !== 0)) {\r\n        throw TypeError('All headers not found in the provided Coinbase Pro file.')\r\n    }\r\n\r\n    return (await Promise.all(results.map(async (x: any) => ({\r\n        ...x, Source: \"CoinbasePro\",\r\n        product: x.product.split('-')[0],\r\n        Error: (x.pricefeetotalunit !== \"EUR\" ? \"Invalid currency detected\" : undefined),\r\n        id: (await nanoid(10))\r\n    })))) as CoinbaseProHeaders[]\r\n}\r\n\r\nconst getCoinbaseProAsColumns = (records: CoinbaseProHeaders[]): ColumnDataCrypto[] => {\r\n    const ret = records.map(record => {\r\n        return {\r\n            id: record.id,\r\n            data: record.createdat,\r\n            produto: record.product,\r\n            valor: `${record.size * record.price} ${record.pricefeetotalunit}`,\r\n            quantidade: record.size,\r\n            custos: `${record.fee ?? record.fee} ${record.pricefeetotalunit}`,\r\n            pre√ßo: `${record.price} ${record.pricefeetotalunit}`,\r\n            total: `${record.total} ${record.pricefeetotalunit}`,\r\n            operation: record.side,\r\n        } as ColumnDataCrypto\r\n    })\r\n    return ret\r\n}\r\n\r\n\r\nconst prepareCoinbaseProForFIFO = (rawData: CoinbaseProHeaders[]): Operation[] => {\r\n    return rawData\r\n        .filter(x => x.side === 'BUY' || x.side === 'SELL')\r\n        .map(record => {\r\n            return {\r\n                symbol: record.product,\r\n                date: new Date(record.createdat),\r\n                price: Number(record.price),\r\n                amount: Number(record.size),\r\n                type: record.side as \"BUY\" | \"SELL\",\r\n                transactionFee: Number(record.fee),\r\n            }\r\n        })\r\n}\r\n\r\nexport {\r\n    parseCoinbaseCSV,\r\n    parseDegiroCSV,\r\n    parseNordnetCSV,\r\n    getDegiroAsColumns,\r\n    getCoinbaseAsColumns,\r\n    prepareCoinbaseForFIFO,\r\n    parseCoinbaseProCSV,\r\n    getCoinbaseProAsColumns,\r\n    prepareCoinbaseProForFIFO,\r\n    getNordnetAsColumns,\r\n    prepareNordnetForFIFO,\r\n    prepareDegiroForFIFO,\r\n    getDataDegiro,\r\n    getDataNordnet,\r\n    getDataCoinbase,\r\n    getDataCoinbasePro,\r\n}\r\n","import { GridColTypeDef, GridColumns } from '@mui/x-data-grid';\r\n\r\nexport interface ColumnTransaction {\r\n    id: 'ticker' | 'buydate' | 'selldate' | 'amountsold' | 'transferPrice' | 'acquisitionPrice' | 'acquisitionFee' | 'transferFee' | 'profitOrLoss';\r\n    label: string;\r\n    minWidth?: number;\r\n    align?: 'right';\r\n    format?: (value: number) => string;\r\n}\r\n\r\nexport const currencyFormatter = (value: any) => new Intl.NumberFormat('fi-FI', {\r\n    style: 'currency',\r\n    currency: value,\r\n});\r\n\r\nconst validateOperation = (operation: any) => {\r\n    return operation === \"BUY\" || operation === \"SELL\"\r\n}\r\n\r\nconst validateCurrency = (currencyInput: any) => {\r\n    const string = String(currencyInput) ?? \"\"\r\n    return string.split(' ').length === 2\r\n}\r\n\r\nconst currencyFormat: GridColTypeDef = {\r\n    type: 'string',\r\n    valueFormatter: ({ value }) => {\r\n        const str = String(value) ? String(value) : \"0 EUR\"\r\n        const arr = str.split(' ').length === 2 ? str.split(' ') : \"0 EUR\"\r\n        try {\r\n            return currencyFormatter(arr[1]).format(Number(arr[0]))\r\n        } catch (e) {\r\n            return str\r\n        }\r\n\r\n    },\r\n    cellClassName: 'font-tabular-nums',\r\n};\r\n\r\nconst currencyFormatResults: GridColTypeDef = {\r\n    type: 'number',\r\n    valueFormatter: ({ value }) => {\r\n        const str = String(value) ? String(value) : \"0 EUR\"\r\n        const arr = str.split(' ').length === 2 ? str.split(' ') : \"0 EUR\"\r\n        try {\r\n            return currencyFormatter(arr[1]).format(Number(arr[0]))\r\n        } catch (e) {\r\n            return new Intl.NumberFormat('fi-FI', {\r\n                style: 'currency',\r\n                currency: \"EUR\",\r\n            }).format(Number(str))\r\n        }\r\n\r\n    },\r\n    cellClassName: 'font-tabular-nums',\r\n};\r\n\r\nconst timeFormat: GridColTypeDef = {\r\n    type: 'dateTime',\r\n    valueFormatter: ({ value }) => {\r\n        const date = new Date(value as any);\r\n        const options: any = {\r\n            year: \"numeric\",\r\n            month: \"2-digit\",\r\n            day: \"2-digit\",\r\n            hour: \"2-digit\",\r\n            minute: \"2-digit\",\r\n            second: \"2-digit\"\r\n        };\r\n\r\n        return date.toLocaleString(\"en-GB\", options);\r\n    },\r\n    cellClassName: 'font-tabular-nums',\r\n};\r\n\r\nconst columnsSecurity: GridColumns = [\r\n    { field: 'data', headerName: 'Data', ...timeFormat, editable: true, minWidth: 180, },\r\n    {\r\n        field: 'operation', headerName: 'Opera√ß√£o', type: 'string', editable: true, minWidth: 40,\r\n        preProcessEditCellProps: (params) => {\r\n            const isValid = validateOperation(params.props.value);\r\n            return { ...params.props, error: !isValid };\r\n        },\r\n    },\r\n    { field: 'produto', headerName: 'Produto', type: 'string', editable: true, minWidth: 240 },\r\n    {\r\n        field: 'valor', headerName: 'Valor', editable: true, minWidth: 120,\r\n        ...currencyFormat,\r\n        preProcessEditCellProps: (params) => {\r\n            const isValid = validateCurrency(params.props.value);\r\n            return { ...params.props, error: !isValid };\r\n        },\r\n    },\r\n    { field: 'quantidade', headerName: 'Quantidade', type: 'number', editable: true, minWidth: 50 },\r\n    {\r\n        field: 'pre√ßo', headerName: 'Pre√ßo', editable: true, minWidth: 120,\r\n        ...currencyFormat,\r\n        preProcessEditCellProps: (params) => {\r\n            const isValid = validateCurrency(params.props.value);\r\n            return { ...params.props, error: !isValid };\r\n        },\r\n    },\r\n    {\r\n        field: 'custos', headerName: 'Custos', type: 'number', editable: true, minWidth: 110,\r\n        ...currencyFormat,\r\n        preProcessEditCellProps: (params) => {\r\n            const isValid = validateCurrency(params.props.value);\r\n            return { ...params.props, error: !isValid };\r\n        },\r\n    },\r\n    {\r\n        field: 'total', headerName: 'Total', editable: true, minWidth: 170,\r\n        ...currencyFormat,\r\n        preProcessEditCellProps: (params) => {\r\n            const isValid = validateCurrency(params.props.value);\r\n            return { ...params.props, error: !isValid };\r\n        },\r\n    },\r\n];\r\n\r\n\r\n\r\n\r\nconst columnsCrypto: GridColumns = [\r\n    { field: 'data', headerName: 'Data', ...timeFormat, editable: true, minWidth: 180, },\r\n    {\r\n        field: 'operation', headerName: 'Opera√ß√£o', type: 'string', editable: true, minWidth: 140,\r\n        preProcessEditCellProps: (params) => {\r\n            const isValid = validateOperation(params.props.value);\r\n            return { ...params.props, error: !isValid };\r\n        },\r\n    },\r\n    { field: 'produto', headerName: 'Security', type: 'string', editable: true, minWidth: 120 },\r\n    {\r\n        field: 'valor', headerName: 'Valor', editable: true, minWidth: 120,\r\n        ...currencyFormat,\r\n        preProcessEditCellProps: (params) => {\r\n            const isValid = validateCurrency(params.props.value);\r\n            return { ...params.props, error: !isValid };\r\n        },\r\n    },\r\n    { field: 'quantidade', headerName: 'Quantidade', type: 'number', editable: true, minWidth: 120 },\r\n    {\r\n        field: 'pre√ßo', headerName: 'Pre√ßo', editable: true, minWidth: 120,\r\n        ...currencyFormat,\r\n        preProcessEditCellProps: (params) => {\r\n            const isValid = validateCurrency(params.props.value);\r\n            return { ...params.props, error: !isValid };\r\n        },\r\n    },\r\n    {\r\n        field: 'custos', headerName: 'Custos', type: 'number', editable: true, minWidth: 110,\r\n        ...currencyFormat,\r\n        preProcessEditCellProps: (params) => {\r\n            const isValid = validateCurrency(params.props.value);\r\n            return { ...params.props, error: !isValid };\r\n        },\r\n    },\r\n    {\r\n        field: 'total', headerName: 'Total', editable: true, minWidth: 170,\r\n        ...currencyFormat,\r\n        preProcessEditCellProps: (params) => {\r\n            const isValid = validateCurrency(params.props.value);\r\n            return { ...params.props, error: !isValid };\r\n        },\r\n    },\r\n];\r\n\r\n\r\nconst columnsTransaction = (mode: 'CRYPTO' | 'SECURITY'): GridColumns => [\r\n    { field: 'ticker', headerName: 'Produto', type: 'string', editable: false, minWidth: mode === 'CRYPTO' ? 50: 250 },\r\n    { field: 'buydate', headerName: 'Data de Compra', type: 'date', editable: false, minWidth: 120 },\r\n    { field: 'selldate', headerName: 'Data de Venda', type: 'date', editable: false, minWidth: 120 },\r\n    { field: 'amountsold', headerName: 'Quantidade vendida', type: 'number', editable: false, minWidth: 50 },\r\n    {\r\n        field: 'transferPrice', headerName: 'Pre√ßo de venda', editable: false, minWidth: 120, ...currencyFormatResults,\r\n    },\r\n    { field: 'acquisitionPrice', headerName: 'Pre√ßo de compra', ...currencyFormatResults, editable: false, minWidth: 120 },\r\n    { field: 'acquisitionFee', headerName: 'Comiss√µes de compra', ...currencyFormatResults, editable: false, minWidth: 120 },\r\n    { field: 'transferFee', headerName: 'Comiss√µes de venda', ...currencyFormatResults, editable: false, minWidth: 120 },\r\n    { field: 'profitOrLoss', headerName: 'Lucro/Prej√∫izo', ...currencyFormatResults, editable: false, minWidth: 120 },\r\n];\r\n\r\n\r\nexport interface ColumnDataSecurity {\r\n    readonly id: string;\r\n    data: Date;\r\n    produto: string;\r\n    isin: string;\r\n    valor: string;\r\n    quantidade: number;\r\n    custos: string;\r\n    pre√ßo: string;\r\n    total: string;\r\n    operation: string;\r\n}\r\n\r\n\r\nexport interface ColumnDataCrypto {\r\n    readonly id: string;\r\n    data: Date;\r\n    operation: string;\r\n    produto: string;\r\n    valor: string;\r\n    quantidade: number;\r\n    custos: string;\r\n    pre√ßo: string;\r\n    total: string;\r\n}\r\n\r\n\r\nexport interface ColumnDataTransaction {\r\n    readonly id: number;\r\n    ticker: string\r\n    buydate: Date\r\n    selldate: Date\r\n    amountsold: number\r\n    transferPrice: number\r\n    acquisitionPrice: number\r\n    acquisitionFee: number\r\n    transferFee: string\r\n    profitOrLoss: string\r\n}\r\n\r\n\r\n\r\nexport { columnsSecurity, columnsCrypto, columnsTransaction }\r\n","import { columnsTransaction, ColumnDataTransaction } from './tableSettings'\r\nimport {\r\n    DataGrid,\r\n    GridToolbarContainer,\r\n    GridToolbarExport,\r\n    gridClasses,\r\n    GridRowsProp\r\n} from '@mui/x-data-grid';\r\n\r\nimport './printTableStyles.css'\r\n\r\ninterface Props {\r\n    rows: ColumnDataTransaction[],\r\n    mode: 'CRYPTO' | 'SECURITY'\r\n}\r\n\r\nconst CustomToolbar = () => {\r\n    return (\r\n        <GridToolbarContainer style={{paddingLeft: 24}} className={gridClasses.toolbarContainer}>\r\n            <GridToolbarExport printOptions={{\r\n                bodyClassName: \"printTableStyles\", hideToolbar: true, hideFooter: true, allColumns: true\r\n            }}\r\n            />\r\n        </GridToolbarContainer>\r\n    );\r\n}\r\n\r\nconst ResultTable = ({ rows, mode }: Props) => {\r\n    return (<div style={{ width: '100%' }}>\r\n        <DataGrid\r\n            sx={{\r\n                minHeight: 700,\r\n            }}\r\n            rows={rows as GridRowsProp}\r\n            columns={columnsTransaction(mode)}\r\n            components={{\r\n                Toolbar: CustomToolbar,\r\n            }}\r\n        />\r\n    </div>\r\n\r\n    )\r\n}\r\n\r\nexport { ResultTable }\r\n","/*\r\n*  Extended from https://github.com/bernardobelchior/fifo-capital-gains-js/blob/master/src/capital-gains.ts\r\n*/\r\nimport { Operation, Transaction } from './types';\r\nimport _ from 'lodash';\r\n\r\nexport interface CapitalResults {\r\n  /**\r\n   * Sale that triggered the capital gains\r\n   */\r\n  transactions: Transaction[]\r\n\r\n  /**\r\n   * Capital gains triggered from the sale\r\n   */\r\n  capitalGainPerSellDate: number\r\n}\r\n\r\n/**\r\n * Calculates the FIFO capital gains for the given operation history.\r\n * It separates capital gains of securities using the symbols given\r\n * in each operation.\r\n *\r\n * @param operationHistory History of operations (buy and sales) to\r\n * calculate the capital gains for.\r\n *\r\n * @throws If the amount of securities of all sell operations of a given symbol\r\n * exceeds the amount of securities of all buy operations for the same symbol.\r\n * This indicates that there is an error in the input, since it is not possible\r\n * to sell more securities than the ones bought.\r\n *\r\n * @returns The FIFO capital gains with details of the transaction details\r\n * for each sell operation\r\n *\r\n * [\r\n    {\r\n        \"capitalGainPerSellDate\": -315.6,\r\n        \"transactions\": [\r\n            {\r\n                \"ticker\": \"GME\",\r\n                \"buydate\": \"2019-02-01T00:00:00.000Z\",\r\n                \"selldate\": \"2020-03-01T00:00:00.000Z\",\r\n                \"amountsold\": 3,\r\n                \"transferPrice\": 50,\r\n                \"profitOrLoss\": -300,\r\n                \"acquisitionPrice\": 150,\r\n                \"acquisitionFee\": 4.2,\r\n                \"transferFee\": 4.1\r\n            },\r\n            {\r\n                \"ticker\": \"GME\",\r\n                \"buydate\": \"2020-01-01T00:00:00.000Z\",\r\n                \"selldate\": \"2020-03-01T00:00:00.000Z\",\r\n                \"amountsold\": 1,\r\n                \"transferPrice\": 50,\r\n                \"profitOrLoss\": 0,\r\n                \"acquisitionPrice\": 50,\r\n                \"acquisitionFee\": 3.2,\r\n                \"transferFee\": 4.1\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"capitalGainPerSellDate\": 97.7,\r\n        \"transactions\": [\r\n            {\r\n                \"ticker\": \"GME\",\r\n                \"buydate\": \"2020-01-01T00:00:00.000Z\",\r\n                \"selldate\": \"2020-04-01T00:00:00.000Z\",\r\n                \"amountsold\": 3,\r\n                \"transferPrice\": 86,\r\n                \"profitOrLoss\": 108,\r\n                \"acquisitionPrice\": 50,\r\n                \"acquisitionFee\": 3.2,\r\n                \"transferFee\": 7.1\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"capitalGainPerSellDate\": 995.6999999999999,\r\n        \"transactions\": [\r\n            {\r\n                \"ticker\": \"BB\",\r\n                \"buydate\": \"2020-02-01T00:00:00.000Z\",\r\n                \"selldate\": \"2021-01-01T00:00:00.000Z\",\r\n                \"amountsold\": 10,\r\n                \"transferPrice\": 150,\r\n                \"profitOrLoss\": 1000,\r\n                \"acquisitionPrice\": 50,\r\n                \"acquisitionFee\": 2.2,\r\n                \"transferFee\": 2.1\r\n            }\r\n        ]\r\n    }\r\n]\r\n */\r\nexport function calculateFIFOCapitalGains(\r\n  operationHistory: Operation[]\r\n): CapitalResults[] {\r\n  const sortedOperationHistory = _.sortBy(operationHistory, o => new Date(o.date))\r\n  const sales = sortedOperationHistory.filter(({ type }) => type === 'SELL');\r\n  return sales.reduce<CapitalResults[]>(\r\n    (capitalGainPerSellDate, sale) => [\r\n      ...capitalGainPerSellDate,\r\n      calculateCapitalGainsForSale(sortedOperationHistory, sale),\r\n    ],\r\n    []\r\n  );\r\n}\r\n\r\n/**\r\n * Calculates the FIFO capital gains for the given operation history. \r\n * Transfer fees are divided between SELL operations, so the end resulting\r\n * SELL batch trasnferprice for the bought asset remains the same.\r\n *\r\n * @param operationHistory History of operations (buy and sales) to\r\n * calculate the capital gains for. \r\n *\r\n * @returns The FIFO transaction details by every sold security\r\n * example\r\n *  {\r\n        ticker: 'GME',\r\n        buydate: 2020-01-01T00:00:00.000Z,\r\n        selldate: 2020-04-01T00:00:00.000Z,\r\n        amountsold: 3,\r\n        transferPrice: 86,\r\n        profitOrLoss: 108,\r\n        acquisitionPrice: 50,\r\n        acquisitionFee: 3.2,\r\n        transferFee: 7.1\r\n      },\r\n      {\r\n        ticker: 'BB',\r\n        buydate: 2020-02-01T00:00:00.000Z,\r\n        selldate: 2021-01-01T00:00:00.000Z,\r\n        amountsold: 10,\r\n        transferPrice: 150,\r\n        profitOrLoss: 1000,\r\n        acquisitionPrice: 50,\r\n        acquisitionFee: 2.2,\r\n        transferFee: 2.1\r\n      }\r\n *\r\n */\r\nexport const calculateFIFOTransactions = (operationHistory: Operation[]): Transaction[] => {\r\n  const correctedTransferFees = calculateFIFOCapitalGains(operationHistory).flatMap((gainByDate) => {\r\n    const totalSoldAmount = _.sumBy(gainByDate.transactions, (o) => o.amountsold)\r\n    const dividedFees = gainByDate.transactions.map(x => ({\r\n      ...x,\r\n      transferFee: (x.amountsold / totalSoldAmount) * x.transferFee,\r\n    }))\r\n    const transferFeeForSell = gainByDate.transactions[0] ? gainByDate.transactions[0].transferFee : 0\r\n    const transferFeeSummedFromSELLOperation = _.sumBy(dividedFees, (o) => o.transferFee)\r\n    if (transferFeeForSell !== transferFeeSummedFromSELLOperation) {\r\n      console.warn(`Amount of fees for do not match for ${gainByDate.transactions[0]?.ticker}: ${transferFeeForSell} and ${transferFeeSummedFromSELLOperation}`)\r\n    }\r\n    return dividedFees\r\n  });\r\n  if (correctedTransferFees.length === 0) {\r\n    throw new Error(\"No SELL transactions found. Have you sold any asset?\")\r\n  }\r\n  const correctedAcquisitionFees = correctedTransferFees.map(x => {\r\n    const amoutntBought = _.sumBy(correctedTransferFees.filter(y => y.buydate === x.buydate), o => o.amountsold)\r\n    return {\r\n      ...x,\r\n      acquisitionFee: (x.amountsold / amoutntBought) * x.acquisitionFee,\r\n    }\r\n  })\r\n  return correctedAcquisitionFees\r\n}\r\n\r\n\r\nconst calculateCapitalGainsForSale = (\r\n  operationHistory: Operation[],\r\n  sale: Operation\r\n): CapitalResults => {\r\n  let capitalGainPerSellDate = 0;\r\n  const transactions: Transaction[] = [];\r\n  const relatedBuyTransactions = _.orderBy(operationHistory, (o: Operation) => [new Date(o.date), o.type], ['asc', 'desc']).filter(\r\n    ({ type, symbol, date }) =>\r\n      type === 'BUY' && symbol === sale.symbol && date <= sale.date\r\n  );\r\n\r\n  // Order the result set in ASC order so the oldest buy operations are handled first\r\n  relatedBuyTransactions.forEach(\r\n    (buy) => {\r\n      const amountSold = Math.min(sale.amount, buy.amount);\r\n      // if the total amount of held shares have not yet been sold\r\n      if (amountSold === 0) return;\r\n      const trs: Transaction = {\r\n        ticker: sale.symbol,\r\n        buydate: buy.date,\r\n        selldate: sale.date,\r\n        amountsold: amountSold,\r\n        transferPrice: sale.price,\r\n        profitOrLoss: amountSold * (sale.price - buy.price),\r\n        acquisitionPrice: buy.price,\r\n        acquisitionFee: buy.transactionFee,\r\n        transferFee: sale.transactionFee,\r\n      };\r\n      transactions.push(trs);\r\n\r\n      buy.amount -= amountSold;\r\n      sale.amount -= amountSold;\r\n      // We reduce the transactionsfees from the capital gain\r\n      const totalPrice =\r\n        amountSold * (sale.price - buy.price)\r\n      capitalGainPerSellDate += totalPrice;\r\n    }\r\n  );\r\n  // TODO: removee nii perkeleesti ja implementoi uudestaan paremmin\r\n  //if (Number(sale.amount ?  sale.amount.toFixed(6) : 0) > 0) {\r\n  if (Math.round(sale.amount) > 0) {\r\n    throw Error(\r\n      `Amount of sales for ticker ${sale.symbol} exceeds the amount of buys by ${sale.amount}. In transaction made in ${new Date(sale.date)\r\n        .toLocaleString('en-GB', { timeZone: 'UTC' })}`\r\n    );\r\n  }\r\n\r\n  return {\r\n    capitalGainPerSellDate,\r\n    transactions: transactions,\r\n  };\r\n};\r\n","import React, { ChangeEvent, useEffect, useState } from 'react'\r\nimport { Paper, Stack, styled, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow } from '@mui/material';\r\nimport { ColumnDataCrypto, ColumnDataSecurity, columnsCrypto, columnsTransaction, ColumnTransaction, ColumnDataTransaction, columnsSecurity } from './tableSettings'\r\nimport { DataGrid, GridCellEditCommitParams, GridRowsProp } from '@mui/x-data-grid';\r\nimport { rawDatas } from './PreviewData';\r\nimport _ from 'lodash';\r\n\r\ninterface Props {\r\n    rows: ColumnDataSecurity[] | ColumnDataCrypto[],\r\n    mode: 'CRYPTO' | 'SECURITY'\r\n    rawDataAsColumns: ColumnDataSecurity[] | ColumnDataCrypto[],\r\n    rawDatatSetCallback(arg0: ColumnDataSecurity[] | ColumnDataCrypto[]): void\r\n}\r\n\r\nconst PreviewTable = ({ rows, mode, rawDataAsColumns, rawDatatSetCallback }: Props) => {\r\n    const [cellCommit, setCellCommit] = useState({} as any);\r\n\r\n    useEffect(() => {\r\n        if (cellCommit?.row?.id) {\r\n            const matchingRow = rawDataAsColumns.find(y => y.id === cellCommit.row.id)\r\n            const newObj = { ...matchingRow, [cellCommit.field]: cellCommit.value.trim() } as ColumnDataSecurity | ColumnDataCrypto\r\n            const arr = rawDataAsColumns.map(item => item.id === newObj.id ? newObj : item) as ColumnDataSecurity[] | ColumnDataCrypto[]\r\n            rawDatatSetCallback(arr)\r\n        }\r\n    }, [cellCommit])\r\n\r\n    return (\r\n\r\n        <DataGrid\r\n            sx={{\r\n                height: 700,\r\n                '& .font-tabular-nums': {\r\n                    fontVariantNumeric: 'tabular-nums',\r\n                },\r\n                width: 1,\r\n                '& .MuiDataGrid-cell--editing': {\r\n                    bgcolor: 'rgb(255,215,115, 0.19)',\r\n                    color: '#1a3e72',\r\n                },\r\n                '& .Mui-error': {\r\n                    bgcolor: (theme) =>\r\n                        `rgb(126,10,15, ${theme.palette.mode === 'dark' ? 0 : 0.1})`,\r\n                    color: (theme) => (theme.palette.mode === 'dark' ? '#ff4343' : '#750f0f'),\r\n                },\r\n            }}\r\n            rows={rows as GridRowsProp}\r\n            columns={mode === 'CRYPTO' ? columnsCrypto : columnsSecurity}\r\n            onCellEditCommit={(newSelection) => {\r\n                setCellCommit(newSelection);\r\n            }}\r\n        />\r\n\r\n    )\r\n}\r\n\r\nexport { PreviewTable }\r\n","\r\nimport { Alert, Box, Button, createTheme, Paper, Stack, styled, Table, TableBody, TableCell, TableContainer, TableHead, TablePagination, TableRow, ThemeProvider } from '@mui/material';\r\nimport { currencyFormatter } from '../tableSettings';\r\nimport Tooltip from '@mui/material/Tooltip';\r\ninterface Props {\r\n    header: string,\r\n    content: string,\r\n    contentColor: string,\r\n    footer: string,\r\n    footerSecondary: string,\r\n    infoHover: string,\r\n    infoDirection?: \"top\" | \"right\" | \"bottom\" | \"left\" | \"bottom-end\" | \"bottom-start\" | \"left-end\" | \"left-start\" | \"right-end\" | \"right-start\" | \"top-end\" | \"top-start\" | undefined\r\n}\r\n\r\n\r\nconst ResultCard = ({ header, content, footer, footerSecondary, contentColor, infoHover, infoDirection }: Props) => {\r\n    const theme = createTheme({\r\n        typography: {\r\n            fontSize: 14,\r\n        },\r\n        palette: {\r\n            background: {\r\n                paper: '#fff',\r\n            },\r\n            text: {\r\n                primary: '#173A5E',\r\n                secondary: '#46505A',\r\n            },\r\n            action: {\r\n                active: '#001E3C',\r\n            }\r\n        }\r\n    });\r\n\r\n    const formatCurrency = (value: string) => {\r\n        try {\r\n            return currencyFormatter(\"EUR\").format(Number(value))\r\n        } catch {\r\n            return value\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Tooltip title={infoHover} placement={infoDirection}>\r\n                <Box\r\n                    sx={{\r\n                        bgcolor: 'background.paper',\r\n                        boxShadow: 1,\r\n                        borderRadius: 1,\r\n                        p: 2,\r\n                        minWidth: 350,\r\n                    }}\r\n                >\r\n                    <Box sx={{ color: 'text.secondary' }}>{header}</Box>\r\n                    <Box sx={{ color: 'text.primary', fontSize: 30, fontWeight: 'medium' }}>\r\n                        {formatCurrency(content)}\r\n                    </Box>\r\n                    {footer && <Box\r\n                        sx={{\r\n                            color: contentColor,\r\n                            display: 'inline',\r\n                            fontWeight: 'medium',\r\n                            mx: 0.5,\r\n                        }}\r\n                    >\r\n                        {footer}\r\n                    </Box>}\r\n                    <Box sx={{ color: 'text.secondary', display: 'inline', fontSize: 12 }}>\r\n                        {footerSecondary}\r\n                    </Box>\r\n                </Box>\r\n            </Tooltip>\r\n        </ThemeProvider>)\r\n}\r\n\r\nexport { ResultCard }","import { Stack } from '@mui/material'\r\nimport { ResultCard } from './card/ResultCard'\r\nimport { calculatedResultsType } from './PreviewData'\r\n\r\n\r\nconst ResultCards = ({ results }: { results: calculatedResultsType }) => {\r\n    return (\r\n        <Stack direction=\"column\" alignItems=\"center\" justifyContent=\"center\" spacing={2} sx={{ pb: 4 }}>\r\n            <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" spacing={2}>\r\n                <ResultCard header=\"Lucro\"\r\n                    content={results.capitalGains.toFixed(2)}\r\n                    footer=\"Lucros\" footerSecondary=\"totais\"\r\n                    contentColor=\"success.light\"\r\n                    infoHover='Uma mais valia de capital ocorre quando o pre√ßo de venda do ativo √© superior ao pre√ßo de aquisi√ß√£o e as despesas incorridas na mesma'\r\n                    infoDirection='left'\r\n                />\r\n                <ResultCard header=\"Prejuizos\"\r\n                    content={results.capitalLosses.toFixed(2)}\r\n                    footer=\"Prejuizos\" footerSecondary=\"totais\"\r\n                    contentColor=\"error.light\"\r\n                    infoHover='Uma menos valia de capital ocorre quando o pre√ßo de venda do ativo √© inferior ao pre√ßo de aquisi√ß√£o e as despesas incorridas na mesma'\r\n                    infoDirection='right'\r\n                />\r\n            </Stack>\r\n            <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" spacing={2}>\r\n                <ResultCard header=\"Total de gastos\"\r\n                    content={results.acquisitionFees.toFixed(2)}\r\n                    footer=\"\"\r\n                    footerSecondary=\"Total de compras + comiss√µes\"\r\n                    contentColor=\"error.light\"\r\n                    infoHover='Custo total da aquisi√ß√£o dos tit√∫los e custos de transa√ß√£o.'\r\n                    infoDirection='left'\r\n                />\r\n                <ResultCard header=\"Total de proveitos\"\r\n                    content={results.sellprices.toFixed(2)}\r\n                    footer=\"\"\r\n                    footerSecondary=\"Total de vendas - comiss√µes\"\r\n                    contentColor={results.sellprices > 0 ? 'success.light' : 'error.light'}\r\n                    infoHover='Proveitos totais dos titulos vendidos, deduzidos dos custos de transa√ß√£o de venda'\r\n                    infoDirection='right'\r\n                />\r\n            </Stack>\r\n        </Stack>)\r\n}\r\n\r\nexport default ResultCards","import { useEffect, useState, forwardRef } from 'react'\r\nimport _ from 'lodash';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport GlobalStyles from '@mui/material/GlobalStyles';\r\nimport Container from '@mui/material/Container';\r\nimport Typography from '@mui/material/Typography';\r\nimport { Button, createTheme, FormControlLabel, Stack, Switch, ThemeProvider } from '@mui/material';\r\nimport { Dropzone } from './Dropzone';\r\nimport { FileObject } from 'react-mui-dropzone';\r\nimport { Copyright } from './Copyright';\r\nimport { getCoinbaseAsColumns, getDataCoinbase, getDataCoinbasePro, getDataDegiro, getDataNordnet } from '../utils/parsers/loadTransactions'\r\nimport { CoinbaseHeaders, CoinbaseProHeaders, DegiroHeaders, NordnetHeaders } from '../utils/parsers/types';\r\nimport { ResultTable } from './ResultTable'\r\nimport { ColumnDataCrypto, ColumnDataSecurity, ColumnDataTransaction, columnsCrypto, columnsSecurity } from './tableSettings';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport DownloadIcon from '@mui/icons-material/Download';\r\nimport { calculateFIFOTransactions } from '../utils/fifo'\r\nimport { chooseCSVParser, parseColumnDataToFIFO } from '../utils/parsers/helpers'\r\nimport axios from 'axios';\r\nimport moment, { invalid } from 'moment';\r\nimport { PreviewTable } from './PreviewTable'\r\nimport { nanoid } from 'nanoid'\r\nimport Snackbar, { SnackbarOrigin } from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport AlertTitle from '@mui/material/AlertTitle';\r\nimport ResultCards from './ResultCards';\r\nconst parsersCrypto = [getDataCoinbase, getDataCoinbasePro]\r\nconst parsersSecurity = [getDataDegiro, getDataNordnet]\r\n\r\nexport interface rawDatas {\r\n    Coinbase: CoinbaseHeaders[]\r\n    CoinbasePro: CoinbaseProHeaders[]\r\n    Degiro: DegiroHeaders[]\r\n    Nordnet: NordnetHeaders[]\r\n}\r\n\r\nexport interface calculatedResultsType {\r\n    capitalGains: number,\r\n    capitalLosses: number,\r\n    acquisitionFees: number,\r\n    sellprices: number\r\n}\r\n\r\nexport interface resultFromParse {\r\n    orig?: rawDatas\r\n    rows?: ColumnDataSecurity[] | ColumnDataCrypto[]\r\n    Error?: Error\r\n    fileName?: string\r\n}\r\n\r\ninterface Props {\r\n    mode: \"CRYPTO\" | \"SECURITY\"\r\n}\r\n\r\nconst Alert = forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nconst PreviewData = ({ mode }: Props) => {\r\n    const [zoneHeight, setZoneHeight] = useState(400);\r\n    const [files, setFiles] = useState<FileObject[]>([]);\r\n    const [showTable, setShowTable] = useState(false)\r\n    const [showThankYou, setShowThankYou] = useState(false)\r\n\r\n    const [rowDataColumn, setRowDataColumn] = useState<ColumnDataSecurity[] | ColumnDataCrypto[]>([] as any[]);\r\n    const [rawDataAsColumns, setRawDataAsColumns] = useState<ColumnDataSecurity[] | ColumnDataCrypto[]>([] as any[]);\r\n    const [originalData, setOriginalData] = useState<rawDatas>({} as rawDatas);\r\n    const rawDataSetCallback = (newRawData: ColumnDataSecurity[] | ColumnDataCrypto[]) => setRawDataAsColumns(newRawData)\r\n\r\n    const [results, setResults] = useState<ColumnDataTransaction[]>([]);\r\n    const [parseError, setParseError] = useState(\"\")\r\n    const [errorFifo, setErrorFifo] = useState(\"\")\r\n    const [showCurrencyFetchButton, setShowCurrencyFetchButton] = useState(false)\r\n    const [calculatedResults, setCalculatedResults] = useState({} as calculatedResultsType);\r\n\r\n    const fileCallback = (file: FileObject[]) => setFiles([...files, ...file])\r\n\r\n\r\n    const clearRows = () => {\r\n        setFiles([])\r\n        setRowDataColumn([])\r\n        setRawDataAsColumns([])\r\n        setOriginalData({} as any)\r\n        setShowTable(false)\r\n        setZoneHeight(400)\r\n        setResults([])\r\n    }\r\n\r\n    const calculateFIFO = () => {\r\n        try {\r\n            const fifoData = parseColumnDataToFIFO(rowDataColumn, originalData)\r\n            const finalFifo = calculateFIFOTransactions(fifoData)\r\n            setResults(finalFifo.map((x, idx) => ({\r\n                ...x,\r\n                buydate: new Date(x.buydate),\r\n                selldate: new Date(x.selldate),\r\n                transferFee: `${Number(x.transferFee)} EUR`,\r\n                profitOrLoss: `${Number(x.profitOrLoss - (Math.abs(x.acquisitionFee) + Math.abs(x.transferFee)))} EUR`,\r\n                id: idx\r\n            })))\r\n\r\n            setCalculatedResults(() => {\r\n                return {\r\n                    capitalGains: _.sumBy(finalFifo, (o) => {\r\n                        const minusFees = o.profitOrLoss - (Math.abs(o.acquisitionFee) + Math.abs(o.transferFee))\r\n                        return minusFees > 0 ? minusFees : 0\r\n                    }),\r\n                    capitalLosses: _.sumBy(finalFifo, (o) => {\r\n                        const minusFees = o.profitOrLoss - (Math.abs(o.acquisitionFee) + Math.abs(o.transferFee))\r\n                        return minusFees < 0 ? minusFees : 0\r\n                    }),\r\n                    acquisitionFees: _.sumBy(finalFifo, (o) => ((o.amountsold * o.acquisitionPrice) + Math.abs(o.acquisitionFee))),\r\n                    sellprices: _.sumBy(finalFifo, (o) => ((o.amountsold * o.transferPrice) - Math.abs(o.transferFee)))\r\n                }\r\n            })\r\n\r\n        } catch (e: any) {\r\n            setErrorFifo(e.message)\r\n        }  \r\n    }\r\n\r\n    const currencyClick = () => {\r\n        (async () => {\r\n            const additionlOperationTobeAdded = [] as any[]\r\n            const arrReplacedObj = await Promise.all(rawDataAsColumns.map(async item => {\r\n                const fixedCurrencies = [] as any[]\r\n                if ((item.operation === 'BUY' || item.operation === 'SELL') && item.total.split(' ')[1] !== \"EUR\") {\r\n                    const requestDate = moment(item.data).format('YYYY-MM-DD');\r\n                    const unitAsEur = (await (await axios.get(`https://api.coinbase.com/v2/prices/${item.produto}-EUR/spot?date=${requestDate}`)).data.data)?.amount\r\n                    const percentageOfFee = Number(item.custos.split(' ')[0]) / Number(item.total.split(' ')[0])\r\n                    const totalInEur = unitAsEur * item.quantidade\r\n                    const totalFee = totalInEur * percentageOfFee\r\n\r\n                    // Handle sell\r\n                    fixedCurrencies.push({\r\n                        ...item,\r\n                        pre√ßo: `${unitAsEur} EUR`,\r\n                        custos: `${totalFee} EUR`,\r\n                        total: `${totalInEur - totalFee} EUR`,\r\n                    })\r\n                    /**\r\n                     * Need to handle Coinbase Pro incorrect currencies as SELL, BUY instead of just sell\r\n                     * SInce most of the entries are just from converting Currency x via uniswap (for example UNI to BTC )\r\n                     */\r\n                    if (originalData['CoinbasePro']?.find(y => y.id === item.id)) {\r\n                        additionlOperationTobeAdded.push({\r\n                            ...item,\r\n                            operation: \"BUY\",\r\n                            id: nanoid(10),\r\n                            produto: `${item.valor.split(' ')[1]}`,\r\n                            pre√ßo: `${unitAsEur} EUR`,\r\n                            custos: `${0} EUR`, // Only set fees for the other divided transaction\r\n                            total: `${totalInEur - totalFee} EUR`,\r\n                        })\r\n                    }\r\n                }\r\n                const obj = fixedCurrencies.find(newObj => newObj.id === item.id)\r\n                return obj ? obj : item\r\n            }))\r\n            setRawDataAsColumns([...arrReplacedObj.concat(additionlOperationTobeAdded)])\r\n            setRowDataColumn([...arrReplacedObj.concat(additionlOperationTobeAdded)])\r\n            setShowCurrencyFetchButton(false)\r\n            setParseError(\"\")\r\n        })()\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            if (files.length > 0) {\r\n                const data = (await chooseCSVParser(files, mode === \"CRYPTO\" ? parsersCrypto : parsersSecurity)) as resultFromParse[]\r\n                const successFul = _.uniqBy(data.filter(x => !x.Error), y => y.fileName)\r\n                const errors = _.uniqBy(data.filter(x => x.Error), y => y.fileName)\r\n                if (errors.length > 0 && successFul.length !== errors.length) {\r\n                    const error = errors.find(err => !successFul.map(x => x.fileName).includes(err.fileName))\r\n                    const msg = error?.Error ? error.Error.message : \"\"\r\n                    if (msg.toString().includes('All headers not found in the provided')) {\r\n                        console.error(\"Debug Parser error: \", msg)\r\n                        setParseError(`Error loading headers in ${error?.fileName} Are you tryin to parse in the wrong site?`)\r\n                    } else if (msg === \"malformed URI sequence\") {\r\n                        console.error(\"Debug Parser error: \", msg)\r\n                        setParseError(`Encoding error while trying to parse file ${error?.fileName} are you in the correct place?`)\r\n                    } else if (msg.startsWith(\"Invalid\")) {\r\n                        setParseError(`Parser error while trying to parse file ${error?.fileName} are you in the correct place?`)\r\n                        console.error(\"Debug Parser error: \", msg)\r\n                    } else {\r\n                        console.error(`Debug error in file ${error?.fileName}: ${msg}`)\r\n                        setParseError(msg)\r\n                    }\r\n                }\r\n\r\n                if (successFul.length > 0) {\r\n                    const newRows = data.filter(result => result.rows)\r\n                    setRowDataColumn([...rowDataColumn.concat(...newRows.map(x => x.rows) as any)])\r\n                    // Set row data so if user has edited a field and uploads a new file it's handled correctly\r\n                    setRawDataAsColumns([...rowDataColumn.concat(...newRows.map(x => x.rows) as any)])\r\n                    const newRawData = Object.assign(originalData, ...data.map(result => result.orig))\r\n                    setOriginalData(newRawData)\r\n                    setShowTable(true)\r\n                }\r\n                setFiles([])\r\n            }\r\n        })()\r\n    }, [files])\r\n\r\n    useEffect(() => {\r\n        const enableCurrencyWarning = rowDataColumn\r\n            .find(invalid => invalid?.total?.split(' ')[1] !== 'EUR'\r\n                && (invalid.operation === 'BUY'\r\n                    || invalid.operation === 'SELL'))\r\n        setShowCurrencyFetchButton(!!enableCurrencyWarning && rowDataColumn.length > 0)\r\n    }, [rowDataColumn])\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            if (results.length > 0) {\r\n                const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))\r\n                await sleep(6000)\r\n                setShowThankYou(true)\r\n            }\r\n        })()\r\n    }, [results])\r\n\r\n\r\n    useEffect(() => {\r\n        if (parseError.includes(\"In trancactions made in\")) {\r\n            setShowCurrencyFetchButton(true)\r\n        }\r\n    }, [parseError])\r\n\r\n\r\n    const theme = createTheme({\r\n        typography: {\r\n            fontSize: 14,\r\n        }\r\n    });\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <GlobalStyles styles={{ ul: { margin: 0, padding: 0, listStyle: 'none' } }} />\r\n            <CssBaseline />\r\n            <Container component=\"main\" sx={{ pt: 8, pb: 4 }}>\r\n                <Stack\r\n                    direction=\"column\"\r\n                    justifyContent=\"center\"\r\n                    alignItems=\"center\"\r\n                    spacing={3}\r\n                    width=\"sm\"\r\n\r\n                >\r\n                    <Typography\r\n                        component=\"h1\"\r\n                        variant=\"h3\"\r\n                        align=\"center\"\r\n                        color=\"text.primary\"\r\n                        gutterBottom\r\n                        sx={{ fontWeight: 'bold', pt: 8 }}\r\n                    >\r\n                        Tax-ify\r\n                    </Typography>\r\n                    <Typography alignSelf=\"center\" align=\"center\" variant=\"h6\" sx={{ pt: 0 }} component=\"p\">\r\n                        {mode === 'CRYPTO' ? \"Crypto\" : \"Tit√∫los\"}\r\n                    </Typography>\r\n                    {parseError && <Alert severity=\"error\">{parseError}</Alert>}\r\n                    {results.length === 0 && <Dropzone zoneHeight={zoneHeight} handleFiles={fileCallback} />}\r\n                    {results.length > 0 && <ResultCards results={calculatedResults} />}\r\n\r\n                    <Typography alignSelf=\"flex-start\" sx={{ pl: 4, pt: 0 }} component=\"p\">\r\n                        {mode === 'CRYPTO' ? \"Plataformas suportadas: Coinbase, Coinbase Pro\" : \"Plataformas suportadas: Degiro\"}\r\n\r\n                    </Typography>\r\n                    \r\n                    <Typography sx={{ pb: 0, pl: 4, mt: 0 }} alignSelf=\"flex-start\" component=\"p\">\r\n\r\n                    </Typography>\r\n                    {/*errorFifo && <Alert severity=\"error\">{errorFifo}</Alert>*/}\r\n                    {/*showCurrencyFetchButton &&\r\n                        <Stack direction=\"row\" alignItems=\"flex-end\" justifyContent=\"center\" spacing={2} sx={{ pb: 1 }}>\r\n                            <Stack direction=\"column\" alignItems=\"center\" justifyContent=\"center\" spacing={2}>\r\n                                <Alert severity=\"warning\" >\r\n                                    You have made transactions that have not been traded in EUR. Do you want to use an <strong>external API</strong> to fetch the currency info?\r\n                                </Alert>\r\n                                <Alert severity=\"info\" >\r\n                                    Note that if the error originated from Coinbase Pro, the currency transfer needs to be converted in to one buy and sell operation.\r\n                                </Alert>\r\n                            </Stack>\r\n                            <div style={{ paddingBottom: \"4px\" }}>\r\n                                <Button variant=\"contained\" sx={{ minWidth: \"140px\", minHeight: \"42px\" }} onClick={currencyClick} endIcon={<DownloadIcon />} >I accept</Button>\r\n                            </div>\r\n                    </Stack>*/}\r\n\r\n                    {showTable && !showCurrencyFetchButton && <Stack direction=\"row\" spacing={2}>\r\n                        <Button variant=\"outlined\" onClick={clearRows} startIcon={<DeleteIcon />}>\r\n                            Apagar\r\n                        </Button>\r\n                        <Button disabled={results.length > 0} onClick={calculateFIFO} variant=\"contained\" endIcon={<SendIcon />}>\r\n                            Calcular\r\n                        </Button>\r\n                    </Stack>}\r\n\r\n                    {(showTable && results.length === 0) && <div style={{ width: '100%' }}>\r\n                        <PreviewTable rows={rowDataColumn} mode={mode} rawDataAsColumns={rawDataAsColumns} rawDatatSetCallback={rawDataSetCallback} />\r\n                    </div>}\r\n                    {results.length > 0 && <ResultTable rows={results} mode={mode} />}\r\n                </Stack>\r\n                {<Copyright />}\r\n            </Container>\r\n        </ThemeProvider >\r\n    );\r\n}\r\n\r\nexport { PreviewData }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Frontpage } from './components/Frontpage'\r\nimport { HashRouter, Route, Routes } from \"react-router-dom\";\r\nimport { PreviewData } from './components/PreviewData'\r\n\r\nReactDOM.render(\r\n  <HashRouter basename={process.env.REACT_APP_URI}>\r\n    <Routes>\r\n      <Route path=\"/\" element={<Frontpage />} />\r\n      <Route path=\"securities\" element={<PreviewData mode=\"SECURITY\" />} />\r\n      <Route path=\"crypto\" element={<PreviewData mode=\"CRYPTO\" />} />\r\n    </Routes>\r\n  </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}